// Generated by CoffeeScript 1.12.6
(function() {
  var DateParser;

  DateParser = {
    LOCALES: {
      'zh-TW': require("./lib/zh-TW")
    },
    DEFAULT_LOCALE: 'zh-TW',
    DEFAULT_TIMEZONE: 'Asia/Taipei',
    locale: function(locale) {
      var ref;
      if (this.LOCALES[locale]) {
        this.DEFAULT_LOCALE = locale;
        return (ref = this.LOCALES[locale].testStrings) != null ? ref.forEach((function(_this) {
          return function(s) {
            return _this.parse(s);
          };
        })(this)) : void 0;
      } else {
        return console.error("No such locale: " + locale);
      }
    },
    timezone: function(timezone) {
      return this.DEFAULT_TIMEZONE = timezone;
    },
    parse: function(text, timezone, locale) {
      var error, expression, expressions, i, len, ref, ref1, ref2, ref3, ref4, ref5, result;
      if (!text) {
        text = '';
      }
      if (!locale) {
        locale = this.DEFAULT_LOCALE;
      }
      if (!timezone) {
        timezone = this.DEFAULT_TIMEZONE;
      }
      expressions = (ref = this.LOCALES[locale]) != null ? ref.expressions : void 0;
      if ((ref1 = this.LOCALES[locale]) != null ? (ref2 = ref1.words) != null ? ref2.interjections : void 0 : void 0) {
        text = text.replace(RegExp((ref3 = this.LOCALES[locale]) != null ? (ref4 = ref3.words) != null ? ref4.interjections : void 0 : void 0, 'g'), '');
      }
      if (!expressions) {
        console.error("No such locale: " + locale);
        return null;
      }
      ref5 = this.LOCALES[locale].expressions;
      for (i = 0, len = ref5.length; i < len; i++) {
        expression = ref5[i];
        try {
          result = expression(text, timezone);
          if (result) {
            return result;
          }
        } catch (error1) {
          error = error1;
          console.error('error', error);
        }
      }
      return null;
    },
    number2integer: function(text, locale) {
      var ref;
      if (!text) {
        text = '';
      }
      if (!locale) {
        locale = this.DEFAULT_LOCALE;
      }
      return (ref = this.LOCALES[locale]) != null ? typeof ref.number2integer === "function" ? ref.number2integer(text) : void 0 : void 0;
    },
    time2object: function(text, locale) {
      var ref;
      if (!text) {
        text = '';
      }
      if (!locale) {
        locale = this.DEFAULT_LOCALE;
      }
      return (ref = this.LOCALES[locale]) != null ? typeof ref.time2object === "function" ? ref.time2object(text) : void 0 : void 0;
    },
    dayTime2moment: function(text, locale) {
      var ref;
      if (!text) {
        text = '';
      }
      if (!locale) {
        locale = this.DEFAULT_LOCALE;
      }
      return (ref = this.LOCALES[locale]) != null ? typeof ref.dayTime2moment === "function" ? ref.dayTime2moment(text) : void 0 : void 0;
    },
    date2object: function(text, locale) {
      var ref;
      if (!text) {
        text = '';
      }
      if (!locale) {
        locale = this.DEFAULT_LOCALE;
      }
      return (ref = this.LOCALES[locale]) != null ? typeof ref.date2object === "function" ? ref.date2object(text) : void 0 : void 0;
    },
    dateExpression2moment: function(text, locale) {
      var ref;
      if (!text) {
        text = '';
      }
      if (!locale) {
        locale = this.DEFAULT_LOCALE;
      }
      return (ref = this.LOCALES[locale]) != null ? typeof ref.dateExpression2moment === "function" ? ref.dateExpression2moment(text) : void 0 : void 0;
    }
  };

  DateParser.locale('zh-TW');

  module.exports = DateParser;

}).call(this);
